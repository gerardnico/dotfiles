#!/bin/bash
# Bashrc: Bash runtime configuration

# set -Eeuo pipefail

# The shebang is for the IDE

# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any warranty.
# You should have received a copy of the CC0 Public Domain Dedication along
# with this software.
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

# base-files version 4.3-3

# ~/.bashrc: executed by bash(1) for interactive shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bashrc

# Modifying /etc/skel/.bashrc directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bashrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bashrc file

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return


# Shell Options
#
# See man bash for more options...
#
# Don't wait for job termination notification
# set -o notify
#
# Don't use ^D to exit
# set -o ignoreeof
#
# Use case-insensitive filename globbing
shopt -s nocaseglob

#
# Make bash append rather than overwrite the history on disk
# shopt -s histappend
#
# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
shopt -s cdspell

# Programmable completion enhancements are enabled via
# /etc/profile.d/bash_completion.sh when the package bash_completion
# is installed.  Any completions you add in ~/.bash_completion are
# sourced last.

# History Options
#
# Don't put duplicate lines in the history.
# export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
#
# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well
#
# Whenever displaying the prompt, write the previous line to disk
# export PROMPT_COMMAND="history -a"

# Aliases
#
# Some people use a different file for aliases
# if [ -f "${HOME}/.bash_aliases" ]; then
#   source "${HOME}/.bash_aliases"
# fi
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#
# Interactive operation...
# alias rm='rm -i'
# alias cp='cp -i'
# alias mv='mv -i'
#
# Default to human readable figures
alias df='df -h'
alias du='du -h'
#
# Misc :)
# alias less='less -r'                          # raw control characters
# alias whence='type -a'                        # where, of a sort
# alias grep='grep --color'                     # show differences in colour
# alias egrep='egrep --color=auto'              # show differences in colour
# alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
alias ls='ls -hF --color=tty'                 # classify files in colour
alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
alias ll='ls -l'                              # long list
alias la='ls -A'                              # all but . and ..
alias l='ls -CF'                              #

# Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
# umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# Functions
#
# Some people use a different file for functions
if [ -f "${HOME}/.bash_functions" ]; then
   source "${HOME}/.bash_functions"
fi
#


# Add the bin (used by chezmoi)
export PATH="$HOME/bin:$PATH"

##############################
# Secrets
##############################
# On Wsl, create the env on Windows and add it to `WSLENV`
# example: WSLENV=WT_SESSION:WT_PROFILE_ID:SSH_AUTH_SOCK:HCLOUD_TOKEN
SECRET_PATH=$HOME/.bashrc-secret
if [ -f "$SECRET_PATH" ]; then
 # shellcheck disable=SC1090
 source "$SECRET_PATH"
fi


##############################
# Cygwin
##############################
# Cygwin or not
if [[ $(uname -a) =~ "CYGWIN" ]]; then
  CYGWIN=1
else
  CYGWIN=0
fi


##############################
# Kube
##############################
if [ -x "$(command -v kubectl)" ]; then

  # Kubeconfig Location
  export KUBECONFIG=$HOME/.kube/config
  if [ $CYGWIN = 1 ] ; then
    # kubectl on windows require windows style path
    KUBECONFIG=$(cygpath -aw "$KUBECONFIG")
  fi

  # Kube editor
  # KUBE_EDITOR default to vi on Linux and notepad on Windows
  # https://kubernetes.io/docs/reference/kubectl/generated/kubectl_edit/
  if [ $CYGWIN = 1 ] ; then
    # kubectl a windows like style path
     export KUBE_EDITOR='c:/Notepad++/notepad++.exe -notabbar -multiInst -nosession -noPlugin'
  fi

  # Kubeconfig Completion and alias as k
  # shellcheck disable=SC1090
  source <(kubectl completion bash)
  alias k=kubectl
  complete -o default -F __start_kubectl k

fi


##############################
# Git
##############################
# Git Completion
# https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash
if [[ ! -f ~/git-completion.bash ]]; then
	echo "Git Completion Not Found. Download"
	curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/git-completion.bash
fi
if [ -f "$HOME"/git-completion.bash ]; then
  . "$HOME"/git-completion.bash
fi
# Git Prompt Customization
# https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash
if [[ ! -f ~/git-prompt.sh ]]; then
    echo "Git Prompt Not Found. Download"
	curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o ~/git-prompt.sh
fi
if [ -f ~/git-prompt.sh ]; then  
  . "$HOME"/git-prompt.sh
  export GIT_PS1_SHOWDIRTYSTATE=1
  # PS1:
  # This is the default PS1 where we have added the __git_ps1 function just before the dollar character
  # Explanation:
  # The \w means print the current working directory, 
  # the \$ prints the $ part of the prompt, 
  # \[exxx] are color formatting syntax
  # and __git_ps1 " (%s)" calls the function provided by git-prompt.sh with a formatting argument. 
  
  export PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n$(__git_ps1 "(%s)")\$ '
fi
# Alias and function
alias gs='git status'
ga(){
  git add . && git commit -m $1 && git push
}



##############################
# Node
##############################
# fnm Eval for the search of node version file on each cd
FNM_PATH="$HOME/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$FNM_PATH:$PATH"
  # Set default to system to avoid: Can't find an installed Node version matching default
  fnm default system
  eval "$(fnm env --use-on-cd --shell bash --version-file-strategy recursive --log-level info)" >/dev/null 2>&1
  # https://github.com/Schniz/fnm?tab=readme-ov-file#completions
  # The below output only the completion script
  eval "$(fnm completions --shell bash)"
fi

##############################
# Ansible
##############################
# https://github.com/gerardnico/ansible
export ANSIBLE_CONFIG=ansible.cfg
export ANSIBLE_HOME=ansible
ANSIBLE_SCRIPTS=$HOME/code/ansible
if [ -d "$ANSIBLE_SCRIPTS" ]; then
  export PATH="$ANSIBLE_SCRIPTS:$PATH"
fi
ANSIBLE_LOCAL_HOME=$HOME/code/infra
if [ -d "$ANSIBLE_SCRIPTS" ]; then
  export ANSIBLE_LOCAL_HOME
fi

###############################
# Rclone completion
##############################
RCLONE_COMPLETION=/etc/bash_completion.d/rclone
if [ -x "$(command -v rclone)" ] && [ ! -f "$RCLONE_COMPLETION" ]; then
  sudo rclone genautocomplete bash $RCLONE_COMPLETION
  # shellcheck disable=SC1090
  source $RCLONE_COMPLETION
fi


##############################
# SSH
##############################
# We start the SSH agent and load the keys

# Load the ssh_agent* functions
# shellcheck source=./dot_bashrc.d/ssh_agent_functions.sh
source "$HOME"/.bashrc.d/ssh_agent_functions

# The location of the env file
export SSH_ENV="$HOME"/.ssh/ssh-agent.env
export SSH_AUTH_SOCK="$HOME"/.ssh/agent.sock

# Load the env if available
ssh-agent-load-env "$SSH_ENV"

# Get the state
SSH_AGENT_RUN_STATE=$(ssh-agent-state)
if [ ! "$SSH_AUTH_SOCK" ] || [ "$SSH_AGENT_RUN_STATE" = 2 ]; then
	echo "Agent not started"
	if [ -f "$SSH_AUTH_SOCK" ]; then
	  echo "Deleting Sock file $SSH_AUTH_SOCK"
	  rm "$SSH_AUTH_SOCK"
	fi
	echo "Staring Agent"
  ssh-agent-start "$SSH_ENV" "$SSH_AUTH_SOCK"
	ssh-add-keys
elif [ "$SSH_AUTH_SOCK" ] && [ "$SSH_AGENT_RUN_STATE" = 1 ]; then
	echo Agent not started but empty
  ssh-add-keys
fi

unset SSH_AGENT_RUN_STATE
unset SSH_ENV

#######################
# cd hook
#######################
source "$HOME"/.bashrc.d/my_cd

##############################
# Env by directories
##############################
# https://direnv.net/docs/installation.html
# Make sure it appears even after rvm, git-prompt and other shell extensions that manipulate the prompt.
if [ -x "$(command -v rclone)" ]; then
  eval "$(direnv hook bash)"
else
  echo_err "You should install direnv"
fi


#There is $PROMPT_COMMAND, which is executed before showing a prompt
trap 'echo -ne "\e]0;$BASH_COMMAND\007"' DEBUG
