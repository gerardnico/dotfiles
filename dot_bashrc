#!/bin/bash
# The shebang is for the IDE

# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any warranty.
# You should have received a copy of the CC0 Public Domain Dedication along
# with this software.
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

# base-files version 4.3-3

# ~/.bashrc: executed by bash(1) for interactive shells.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.bashrc

# Modifying /etc/skel/.bashrc directly will prevent
# setup from updating it.

# The copy in your home directory (~/.bashrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.

# User dependent .bashrc file

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# Shell Options
#
# See man bash for more options...
#
# Don't wait for job termination notification
# set -o notify
#
# Don't use ^D to exit
# set -o ignoreeof
#
# Use case-insensitive filename globbing
# shopt -s nocaseglob
#
# Make bash append rather than overwrite the history on disk
# shopt -s histappend
#
# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
# shopt -s cdspell

# Programmable completion enhancements are enabled via
# /etc/profile.d/bash_completion.sh when the package bash_completetion
# is installed.  Any completions you add in ~/.bash_completion are
# sourced last.

# History Options
#
# Don't put duplicate lines in the history.
# export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
#
# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well
#
# Whenever displaying the prompt, write the previous line to disk
# export PROMPT_COMMAND="history -a"

# Aliases
#
# Some people use a different file for aliases
# if [ -f "${HOME}/.bash_aliases" ]; then
#   source "${HOME}/.bash_aliases"
# fi
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#
# Interactive operation...
# alias rm='rm -i'
# alias cp='cp -i'
# alias mv='mv -i'
#
# Default to human readable figures
alias df='df -h'
alias du='du -h'
#
# Misc :)
# alias less='less -r'                          # raw control characters
# alias whence='type -a'                        # where, of a sort
# alias grep='grep --color'                     # show differences in colour
# alias egrep='egrep --color=auto'              # show differences in colour
# alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
alias ls='ls -hF --color=tty'                 # classify files in colour
alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
alias ll='ls -l'                              # long list
alias la='ls -A'                              # all but . and ..
alias l='ls -CF'                              #

# Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
# umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# Functions
#
# Some people use a different file for functions
# if [ -f "${HOME}/.bash_functions" ]; then
#   source "${HOME}/.bash_functions"
# fi
#
# Some example functions:
#
# a) function settitle
# settitle ()
# {
#   echo -ne "\e]2;$@\a\e]1;$@\a";
# }
#
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
#
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
#
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
#
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
#
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
#
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
#
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
#
#   return 0
# }
#
# alias cd=cd_func

# Add the bin (used by chezmoi)
export PATH="~/bin:$PATH"

##############################
# Secret
##############################
SECRET_PATH=~/.bashrc-secret
if [ -f "$SECRET_PATH" ]; then
 source $SECRET_PATH
fi


##############################
# Cygwin
##############################
# Cygwin or not
if [[ $(uname -a) =~ "CYGWIN" ]]; then
  CYGWIN=1
else
  CYGWIN=0
fi


##############################
# Kube
##############################
# Kube editor
# KUBE_EDITOR default to vi on Linux and notepad on Windows
# https://kubernetes.io/docs/reference/kubectl/generated/kubectl_edit/
if [ $CYGWIN = 1 ] ; then
  # kubectl a windows like style path
   export KUBE_EDITOR='c:/Notepad++/notepad++.exe -notabbar -multiInst -nosession -noPlugin'
fi

# Kubeconfig Location
export KUBECONFIG=$HOME/.kube/config
if [ $CYGWIN = 1 ] ; then
  # kubectl on windows require windows style path
  KUBECONFIG=$(cygpath -aw "$KUBECONFIG")
fi

# Kubeconfig Completiona and alias as k
source <(kubectl completion bash)
alias k=kubectl
complete -o default -F __start_kubectl k


##############################
# Git
##############################
# Git Completion
# https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash
if [[ ! -f ~/git-completion.bash ]]; then
	echo "Git Completion Not Found. Download"
	curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/git-completion.bash
fi
if [ -f ~/git-completion.bash ]; then  
  . ~/git-completion.bash
fi
# Git Prompt Customization
# https://git-scm.com/book/en/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash
if [[ ! -f ~/git-prompt.sh ]]; then
    echo "Git Prompt Not Found. Download"
	curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o ~/git-prompt.sh
fi
if [ -f ~/git-prompt.sh ]; then  
  . ~/git-prompt.sh
  export GIT_PS1_SHOWDIRTYSTATE=1
  # PS1:
  # This is the default PS1 where we have added the __git_ps1 function just before the dollar character
  # Explanation:
  # The \w means print the current working directory, 
  # the \$ prints the $ part of the prompt, 
  # \[exxx] are color formatting syntax
  # and __git_ps1 " (%s)" calls the function provided by git-prompt.sh with a formatting argument. 
  
  export PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n$(__git_ps1 "(%s)")\$ '
fi


##############################
# Node
##############################
# fnm Eval for the search of node version file on each cd
FNM_PATH="~/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$FNM_PATH:$PATH"
  eval "`fnm env --use-on-cd --version-file-strategy recursive`"
fi

##############################
# Ansible
##############################
# https://github.com/gerardnico/ansible
export ANSIBLE_CONFIG=ansible.cfg
export ANSIBLE_HOME=ansible
export ANSIBLE_LOCAL_HOME=/mnt/c/code/infra




##############################
# SSH
##############################
## We start the SSH agent and add passphrased keys if we find env variables that starts with a special prefix

# https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases#auto-launching-ssh-agent-on-git-for-windows
# The env file with the SSH_AUTH_SOCK and SSH_AGENT_PID
# Example:
# SSH_AUTH_SOCK=/tmp/ssh-XXXXXXVv4IgB/agent.17882; export SSH_AUTH_SOCK;
# SSH_AGENT_PID=17883; export SSH_AGENT_PID;
# echo Agent pid 17883;
env=~/.ssh/agent.env

# Start the agent
# normally it was `eval "$(ssh-agent -s)"`
agent_start () {
    echo Starting the ssh-agent
    (umask 077; ssh-agent >| "$env")
    . "$env" >| /dev/null ; 
}

# Load the env
agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }
agent_load_env

# Agent_run_state: 
# * 0=agent running w/ key; 
# * 1=agent w/o key; 
# * 2=agent not running
agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)

if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
    agent_start
	# add default non-protected keys from ~/.ssh
    ssh-add
elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
    ssh-add
fi

unset env


# Loop through the ANSIBLE_SSH_KEY_PASSPHRASE environment variables
# and add the key to the agent
# Example:
# With the env `SSH_KEY_PASSPHRASE_MY_KEY` the script below will:
# * try to find a file at `~/.ssh/my_key`
# * add it with the value of `ANSIBLE_SSH_KEY_PASSPHRASE_MY_KEY` as passphrase
#
SSH_VAR_PREFIX='SSH_KEY_PASSPHRASE_'
for var in $(printenv | grep -oP "^$SSH_VAR_PREFIX\K[^=]+")
do
  filename=$(echo "$var" | tr '[:upper:]' '[:lower:]')
  fullVariableName="$SSH_VAR_PREFIX$var"
  filePath=~/.ssh/"$filename"
  echo "The SSH env variable $fullVariableName was found"
  if [ -f "$filePath" ]; then
	echo "Trying to add the key $filename to the SSH agent"
	# The instruction is in the man page. SSH_ASKPASS needs a path to an executable
	# that emits the secret to stdout.
	# See doc: https://man.archlinux.org/man/ssh.1.en#SSH_ASKPASS
	SSH_ASKPASS="$HOME/.ssh/askpass.sh"
	echo "  - Creating the executable $SSH_ASKPASS"
	PASSPHRASE=$(eval "echo \$$SSH_VAR_PREFIX$var")
	printf "#!/bin/sh\necho %s\n" "$PASSPHRASE" > "$SSH_ASKPASS"
	chmod +x "$SSH_ASKPASS"
	TIMEOUT=5
	echo "  - Executing ssh-add (if the passphrase is incorrect, the execution will freeze for ${TIMEOUT} sec)"
	# freeze due to SSH_ASKPASS_REQUIRE=force otherwise it will ask it at the terminal
	BAD_PASSPHRASE_RESULT="Bad passphrase"
	result=$(timeout $TIMEOUT bash -c "DISPLAY=:0 SSH_ASKPASS_REQUIRE=force SSH_ASKPASS=$SSH_ASKPASS ssh-add $filePath" 2>&1 || echo "$BAD_PASSPHRASE_RESULT")
	echo "  - $result" # should be `Identity added:xxx`
	[ "$result" == "$BAD_PASSPHRASE_RESULT" ] && exit 1;
  else
	echo "The env variable $fullVariableName designs a key file ($filePath) that does not exist" >&2
	exit 1;
  fi
done

