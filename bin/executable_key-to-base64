#!/bin/bash
# Extract the key in a pem file
# so that we can pass it to the terminal

######################
# Standard Library and conf
######################
# The log and error handling
# We still need to use the set command
# because shellcheck does not see them and want use to add
# exit check everywhere
set -Eeuo pipefail
# echo and error_handling should be in your bashrc.d directory


# Function to display usage information
usage() {
    echo "Usage: $0 <pem_file>"
    echo "  pem_file: Path to the PEM file"
    exit 1
}

# Check if the argument is provided
if [ "$#" -ne 1 ]; then
    usage
fi

PEM_FILE=$1

# Check if the PEM file exists
if [ ! -f "$PEM_FILE" ]; then
    echo "Error: PEM file does not exist: $PEM_FILE"
    exit 1
fi

# Function to extract and encode the key
extract_and_encode() {
    # Extract the key content and base64 encode it
    cat "$PEM_FILE" | grep -v --fixed-strings -- '-----BEGIN' | \
    grep -v --fixed-strings -- '-----END' | \
    grep -v "^$" | \
    tr -d '\n'
    # already in base64
    # Add a newline at the end for better readability
    echo
}

# Detect key type and extract
if grep -q "PRIVATE KEY" "$PEM_FILE"; then
    echo_info "Detected private key. Extracting and encoding:"
elif grep -q "PUBLIC KEY" "$PEM_FILE"; then
    echo_info "Detected public key. Extracting and encoding:"
else
    echo_err "Error: Unable to determine key type. Ensure the file contains a valid PEM-encoded key."
    exit 1
fi

extract_and_encode